"use strict";

// Регулярные выражения – мощное средство поиска и замены в строке.
// В JavaScript регулярные выражения реализованы отдельным объектом RegExp 
// и интегрированы в методы строк.

// new RegExp('pattern', 'flags');
// или так
// /pattern/flags/

// Поиск: str.search
// const ans = prompt('Введите ваше имя');
const reg = /n/i;

// Укажет индекс первой найденой буквы или вернет -1
// Если нужно найти все буквы , в разных регистрах , нужно указать флаги
// console.log(ans.search(reg)); 

// Флаги
// Регулярные выражения могут иметь флаги, которые влияют на поиск.
// В JavaScript их всего шесть:

// i - С этим флагом поиск не зависит от регистра: нет разницы между A и a
// g - С этим флагом поиск ищет все совпадения, без него – только первое.
// m - Многострочный режим (рассматривается в главе Многострочный режим якорей ^ $, флаг "m").
// s - Включает режим «dotall», при котором точка . может соответствовать символу перевода строки \n (рассматривается в главе Символьные классы).
// u - Включает полную поддержку юникода. Флаг разрешает корректную обработку суррогатных пар (подробнее об этом в главе Юникод: флаг "u" и класс \p{...}).
// y - Режим поиска на конкретной позиции в тексте (описан в главе Поиск на заданной позиции, флаг "y")


// Поиск: str.match
// Как уже говорилось, использование регулярных выражений интегрировано в методы строк.
// Метод str.match(regexp) для строки str возвращает совпадения с регулярным выражением regexp.

const str = 'Любо, братцы, любо';
console.log(str.match(/любо/gi)); // ['Любо', 'любо']


// Замена: str.replace
// Метод str.replace(regexp, replacement) заменяет совпадения с regexp в строке str на replacement 
// (все, если есть флаг g, иначе только первое).

// const password = prompt(`Enter your password...`);
// // Для экранирования используется обратный слеш \
// console.log(password.replace(/\./g, '*')); // Заметин все введенные точки на *****  
// console.log(password.replace(/./g, '*')); // Заметин все введенные данные на *****

// console.log('123-456-789'.replace(/-/g, '.'));


// Проверка: regexp.test
// Метод regexp.test(str) проверяет, есть ли хоть одно совпадение, если да, то возвращает true, иначе false.
let strs = "Я ЛюБлЮ JavaScript";
let regexp = /люблю/i;

console.log(regexp.test(strs)); // true


// Символьные классы
// Символьный класс – это специальное обозначение, 
// которое соответствует любому символу из определённого набора.

// Наиболее используемые:
// \d («d» от английского «digit» означает «цифра»)
// Цифра: символ от 0 до 9.

// \s («s»: от английского «space» – «пробел»)
// Пробельные символы: включает в себя символ пробела, 
// табуляции \t, перевода строки \n и некоторые другие редкие пробельные символы, 
// обозначаемые как \v, \f и \r.

// \w («w»: от английского «word» – «слово»)
// Символ «слова», а точнее – буква латинского алфавита или цифра или подчёркивание _. 
// Нелатинские буквы не являются частью класса \w, то есть буква русского алфавита не подходит.

// Для примера, \d\s\w обозначает «цифру», за которой идёт пробельный символ, 
// а затем символ слова, например 1 a.

const question = prompt('Enter your number...');
const regEx = /\d/i;
console.log(question.match(regEx)); // вернет массив. Пример ['3', index: 3, input: 'qqq3qqq', groups: undefined]

const starWars = 'My name is R2D2';
console.log(starWars.match(/\w\d\w\d/ig)); // ['R2D2']


// Обратные символьные классы
// Для каждого символьного класса существует «обратный класс», 
// обозначаемый той же буквой, но в верхнем регистре.

// «Обратный» означает, что он соответствует всем другим символам, например:

// \D - Не цифра: любой символ, кроме \d, например буква.
// \S - Не пробел: любой символ, кроме \s, например буква.
// \W - Любой символ, кроме \w, то есть не буквы из латиницы, не знак подчёркивания и не цифра. 
// В частности, русские буквы принадлежат этому классу.

console.log(starWars.match(/\D/ig));// ['M', 'y', ' ', 'n', 'a', 'm', 'e', ' ', 'i', 's', ' ', 'R', 'D']




