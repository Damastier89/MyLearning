"use strict";

// Управлять областью видимости переменных в JavaScript можно, 
// пользуясь паттерном «Модуль». Для того чтобы создать приватную область видимости, 
// можно воспользоваться замыканием. Как известно, функции создают собственные области видимости, 
// содержимое которых отделено от глобальной области видимости.

(function () {
  // здесь находится приватная область видимости
})();

// Перед нами — так называемая самовызывающаяся функция 
// (IIFE, Immediately-Invoked Function Expression, немедленно вызываемое функциональное выражение). 
// Такая функция выполняется сразу же после её объявления. 
// Подобные функции удобно использовать для того, чтобы решить некую задачу, 
// которую нужно решить лишь один раз, 
// не оставляя при этом ничего лишнего в глобальной области видимости. 
// Внутри этой функции (как, впрочем, и внутри других функций) создаётся приватная область видимости, 
// недоступная извне. То есть, если объявить внутри этой области видимости другую функцию, то, 
// после того, как IIFE выполнится, доступ к ней получить не удастся.


// Объявим модуль
const Module = (function () {
  return {
    myMethod: function () {
      console.log('myMethod has been called.');
    },
    someOtherMethod: function () {

    }
  };
})();

// Вызовем функцию как метод объекта
Module.myMethod();
Module.someOtherMethod();

// Можно заметить, что здесь используется такое же IIFE, как раньше, 
// но из функции теперь возвращается объект с методом, 
// к которому можно обратиться из глобальной области видимости.


// Приватные переменные и функции, хранящиеся в замыкании
const Module1 = (function () {
  const privateMethod = function () {
    console.log('Hello, i am private method!');
  };
  return {
    publicMethod: function () {
      // у этого метода есть доступ к privateMethod, мы можем вызвать его здесь так:
      privateMethod();
    }
  };
})();

Module1.publicMethod(); // Hello, i am private method!

// Метод publicMethod из этого примера можно вызвать извне, а функцию privateMethod — нет, 
// так как она находится в приватной области видимости, в замыкании. 
// Именно подобные функции, недоступные извне, могут выполнять роль вспомогательных механизмов модулей. 
// Они могут использоваться для управления внутренними структурами данных, 
// для выполнения каких-то вызовов к неким сервисам, и в других ситуациях.

// Благодаря этому мы можем защищать код от несанкционированного вмешательства и 
// защищать глобальную область видимости от загрязнения

// Вот пример объекта, возвращаемого из IIFE, 
// который содержит общедоступные методы и может обращаться к приватным функциям:

const Module = (function () {
  const myModule = {};
  const privateMethod = function () {

  };
  myModule.publicMethod = function () {

  };
  myModule.anotherPublicMethod = function () {

  };
  return myModule; // возвращает объект с общедоступными методами
})();

// использование модуля
Module.publicMethod();


// Именование приватных и общедоступных функций

// Существует одно соглашение, в соответствии с которым в начале имён приватных функций ставят знак подчёркивания.
// Это позволяет, лишь взглянув на код, понять, какие функции являются внутренними, 
// а какие — общедоступными. Например, выглядеть это может так:

const Module = (function () {
  const _privateMethod = function () {

  };
  const publicMethod = function () {

  };
  return {
    publicMethod: publicMethod,
  }
})();














